pipeline {
    agent any
 
    environment {
        DOCKER_IMAGE = "your-dockerhub-username/devsecops-validator:latest"
        DOCKER_CREDENTIALS = credentials('dockerhub-credentials')  // create in Jenkins
        SONAR_TOKEN = credentials('sonarqube-token')              // create in Jenkins
        KUBECONFIG_CRED = credentials('kubeconfig-file')          // create in Jenkins
    }
 
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/AryanShukla29/DevSecOps-k8s-framework.git'
            }
        }
 
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                        sonar-scanner \
                          -Dsonar.projectKey=devsecops-k8s-framework \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=http://sonarqube:9000 \
                          -Dsonar.login=$SONAR_TOKEN
                    """
                }
            }
        }
 
        stage('Docker Build') {
            steps {
                sh """
                    docker build -t $DOCKER_IMAGE .
                """
            }
        }
 
        stage('Trivy Scan') {
            steps {
                sh """
                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                        aquasec/trivy:latest image $DOCKER_IMAGE
                """
            }
        }
 
        stage('Docker Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push $DOCKER_IMAGE
                    """
                }
            }
        }
 
        stage('Deploy with ArgoCD') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-file', variable: 'KUBECONFIG')]) {
                    sh """
                        export KUBECONFIG=$KUBECONFIG
                        kubectl apply -f k8s/deployment.yaml
                        kubectl apply -f k8s/service.yaml
                        kubectl apply -f k8s/configmap.yaml
                    """
                }
            }
        }
    }
 
    post {
        always {
            cleanWs()
        }
    }
}

 