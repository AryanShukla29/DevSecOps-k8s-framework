pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "your-dockerhub-username/devsecops-validator"
        IMAGE_TAG = "${BUILD_NUMBER}"
        SONAR_PROJECT_KEY = "fitness-app"
        SONAR_HOST_URL = "http://<your-sonarqube-url>:9000"
        SONAR_TOKEN = credentials('sonar-token')
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub')
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN'
                }
            }
        }

        stage('K8s Manifest Validation') {
            steps {
                sh './jenkins/scripts/k8s-validate.sh'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh './jenkins/scripts/docker-build.sh'
            }
        }

        stage('Trivy Vulnerability Scan') {
            steps {
                sh '''
                    trivy image --exit-code 1 --severity CRITICAL,HIGH $DOCKER_IMAGE:$IMAGE_TAG || {
                        echo "Vulnerabilities found!";
                        exit 1;
                    }
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                        echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
                        docker push $DOCKER_IMAGE:$IMAGE_TAG
                    '''
                }
            }
        }

        stage('Update Helm Values') {
            steps {
                script {
                    sh """
                    echo 'ðŸ“¦ Updating Helm values.yaml with new image tag...'
                    sed -i 's/tag: .*/tag: ${BUILD_NUMBER}/' helm/myapp/values.yaml
                    cat helm/myapp/values.yaml | grep 'tag:'
                    """
                }
            }
        }

        stage('Deploy to Kubernetes via ArgoCD') {
            steps {
                sh '''
                    argocd login <ARGOCD_SERVER> --username admin --password <ARGOCD_PASSWORD> --insecure
                    argocd app sync fitness-app
                '''
            }
        }
    }
}
