pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "aryan25/devsecops-fitness-app"
        IMAGE_TAG = "${BUILD_NUMBER}"
        SONAR_PROJECT_KEY = "fitness-app"
        SONAR_HOST_URL = "http://<your-sonarqube-url>:9000"
        SONAR_TOKEN = credentials('sonar-token')
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub')
        ARGOCD_SERVER = "<your-argocd-server>"
        ARGOCD_USER = "admin"
        ARGOCD_PASSWORD = credentials('argocd-pass')
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        sonar-scanner \
                          -Dsonar.projectKey=$SONAR_PROJECT_KEY \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=$SONAR_HOST_URL \
                          -Dsonar.login=$SONAR_TOKEN
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t $DOCKER_IMAGE:$IMAGE_TAG ."
            }
        }

        stage('Trivy Vulnerability Scan') {
            steps {
                sh '''
                    trivy image --exit-code 1 --severity CRITICAL,HIGH $DOCKER_IMAGE:$IMAGE_TAG || {
                        echo "Vulnerabilities found!";
                        exit 1;
                    }
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                        echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
                        docker push $DOCKER_IMAGE:$IMAGE_TAG
                    '''
                }
            }
        }

        stage('Kubernetes Deployment Validation') {
            steps {
                sh "python3 validate_manifest.py k8s/deployment.yaml"
            }
        }

        stage('Deploy to Kubernetes via ArgoCD') {
            steps {
                sh '''
                    argocd login $ARGOCD_SERVER --username $ARGOCD_USER --password $ARGOCD_PASSWORD --insecure
                    argocd app sync fitness-app
                '''
            }
        }
    }
}
